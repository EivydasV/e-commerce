# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Cart {
  _id: DocId!
  cart: [Cart!]!
  createdAt: DateTime
  product: Product!
  productVariant: ProductVariant!
  quantity: Int!
  updatedAt: DateTime
}

type Category {
  _id: DocId!
  createdAt: DateTime
  name: String!
  parent: Category
  updatedAt: DateTime
}

input CreateCartInput {
  quantity: Int!
}

input CreateCategoryInput {
  name: String!
}

input CreateProductInput {
  description: String!
  manufacturer: String!
  title: String!
}

input CreateProductVariantInput {
  color: String!
  pricing: PricingInput!
  productDimensions: ProductDimensionsInput!
  quantity: Int!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

scalar DocId

input ForgotPasswordInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addToCart(createCartInput: CreateCartInput!, productId: [DocId!]!, productVariantId: [DocId!]!): Boolean!
  createCategory(createCategoryInput: CreateCategoryInput!, parentId: DocId): Category!
  createProduct(categoryIds: [DocId!]!, createProductInput: CreateProductInput!): Product!
  createProductVariant(productId: DocId!, productVariantInput: [CreateProductVariantInput!]!): Product!
  createUser(input: CreateUserInput!): Boolean!
  deleteProduct(productId: DocId!): Boolean!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  login(loginInput: LoginInput!): Boolean!
  logout: Boolean!
  removeProductVariant(productId: DocId!, variantId: DocId!): Product!
  resetPassword(input: ResetPasswordInput!): Boolean!
  updateProduct(productId: DocId!, updateProductInput: UpdateProductInput!): Product!
  updateUser(input: UpdateUserInput!): Boolean!
}

type OffsetPaginatedProduct {
  currentPage: Int!
  edges: [offsetProductEdge!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nextPage: Int
  previousPage: Int
  totalDocs: Int!
  totalPages: Int!
}

type OffsetPaginatedUser {
  currentPage: Int!
  edges: [offsetUserEdge!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nextPage: Int
  previousPage: Int
  totalDocs: Int!
  totalPages: Int!
}

input OffsetPaginationInput {
  page: Int! = 1
  perPage: Int! = 20
}

type Pricing {
  cost: Float!
  currency: String!
  salePrice: Float!
}

input PricingInput {
  cost: Float!
  currency: String!
  salePrice: Float!
}

type Product {
  _id: DocId!
  categories: [Category!]!
  createdAt: DateTime
  description: String!
  isPublished: Boolean
  manufacturer: String!
  seller: User!
  slug: String!
  thumbnail: String
  title: String!
  updatedAt: DateTime
  variants: [ProductVariant!]
}

type ProductDimensions {
  depth: Int!
  height: Int!
  weight: Int!
  width: Int!
}

input ProductDimensionsInput {
  depth: Int!
  height: Int!
  weight: Int!
  width: Int!
}

type ProductVariant {
  _id: DocId!
  color: String!
  createdAt: DateTime
  images: [String!]
  pricing: Pricing!
  productDimensions: ProductDimensions!
  quantity: Int!
  updatedAt: DateTime
}

type Query {
  categories: [Category!]!
  findProductBySlug(slug: String!): Product
  findProductsBySeller(paginate: OffsetPaginationInput, sellerId: DocId!): OffsetPaginatedProduct!
  findUserByEmail(email: String!): User
  findUsers(paginate: OffsetPaginationInput): OffsetPaginatedUser!
  me: User!
}

input ResetPasswordInput {
  email: String!
  forgotPasswordToken: String!
  password: String!
}

input UpdateProductInput {
  description: String
  isPublished: Boolean
  manufacturer: String
  title: String
}

input UpdateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

type User {
  _id: DocId!
  cart: [Cart!]
  createdAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  updatedAt: DateTime
}

type offsetProductEdge {
  node: Product!
}

type offsetUserEdge {
  node: User!
}